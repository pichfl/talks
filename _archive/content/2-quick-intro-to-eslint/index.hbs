---
title: A quick introduction to ESLint
author: Florian Pichler
style: |
  section:first-child {
    background-image: url(eslint-logo.svg);
    background-repeat: no-repeat;
    background-position: center;
  }
---
{{> top}}

{{#slides}}

==== #intro .title

<h1>{{#typo}}{{title}}{{/typo}}</h1>
<p><em>By {{author}}</em></p>

<footer><a href="../">More talks by @pichfl</a></footer>


==== #what


## What's linter?

> generically, lint or a linter is any tool that flags suspicious usage in software written in any computer language. &mdash;&nbsp;via&nbsp;[Wikipedia](https://en.wikipedia.org/wiki/Lint_(software)


==== #why


## Why you should use one

- static analysis helps identify syntax and other code errors without code execution
- the same process can be used to validate code style rules


==== #previously


## Other tools beside ESLint

- [JSLint][1]: The grandfather of JavaScript code quality tools, written by Douglas Crockford.
- [JSHint][2]: JSHint is a community-driven tool to detect errors and potential problems in JavaScript code and to enforce your team's coding conventions.
- [JSCS][3]: JSCS is a code style linter/formatter for programmatically enforcing your style guide.

[1]: http://jslint.com
[2]: http://jshint.com
[3]: http://jscs.info


==== #why-eslint


## Why ESLint

- Plugin based architecture (Browserify, Webpack, Gulp, and many more show this works rather well)
- Uses an AST which allows more complex rules
- Provides a vast amount of rules for possible errors, best practices, variable handling, node.js, stylistic issues, and very good support for **ES2015** & **ES2016**!
- Easy configuration, even for complex setups


==== #setup


## Installation

```bash
# Command Line Interface
npm i -g eslint
```

## Usage

```bash
# The CLI Supports globbing
eslint **/*.js
```


Plugins for Grunt, Gulp, Webpack and many others exist as well. <br>
The generator for this slideshow actually uses **gulp-eslint**.


==== #configuration


## Configuration

- Inline with comments
- `.eslintrc` with support for JSON and YAML
- `eslintConfig` filed in `package.json`

Configuration can be **inherited** (either from a preset or a different folder)


==== #rules


## Rules

- three states:
	- 0: off
	- 1: warn
	- 2: error
- additional configuration


==== #sample-config-json


```json
{
	"parser": "babel-eslint",
	"root": true,
	"extends": "airbnb",
	"env": {
		"node": true,
		"es6": true
	},
	"ecmaFeatures": null,
	"rules": {
		"comma-dangle": [
			2,
			"always-multiline"
		],
		"func-names": 0,
		"indent": [
			1,
			"tab"
		]
	}
}
```


==== #sample-config-yaml


```yaml
---
parser: "babel-eslint" # 1. to support ES2015/2016
root: true             # 2. don't look further up for configs
extends: airbnb        # 3. extend "eslint-config-airbnb"
env:
  es6: true            # 4. expect ES2015+
ecmaFeatures:
  # ...                # 5. enable ES2015 features one by one
rules:                 # 6. modify the inherited config from above
  comma-dangle:
    - 2
    - "always-multiline"
  func-names: 0
  indent:
    - 1
    - "tab"
```


==== #thanks .title

# Discuss<br>ESLint

<footer><a href="../">Back</a></footer>

{{/slides}}

{{> end}}